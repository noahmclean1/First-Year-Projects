#lang typed/racket
(require "../uchicago151/uchicago151.rkt")
(require "../uchicago151/uc151image.rkt")
(require "option.rkt")
(require "loc.rkt")
(require typed/test-engine/racket-tests)

(define-type PieceType (U 'Pawn 'Bishop 'Knight 'Rook 'King 'Queen))
(define-type Player (U 'Black 'White))
(define-struct Piece
  ([type  : PieceType]
   [color : Player]))
(provide PieceType Player (struct-out Piece))

(define-type Square (Option Piece))
(provide Square)

(define-type Board (Listof (Listof Square)))
(provide Board)

(define-struct StdMove
  ([src : Loc]
   [dst : Loc]
   [moved : Piece]
   [captured : (Option Piece)]))
(provide (struct-out StdMove))

(define-struct CastleMove
  ([king-src : Loc]
   [king-dst : Loc]
   [rook-src : Loc]
   [rook-dst : Loc]
   [moved : Player]))
(provide (struct-out CastleMove))

(define-type PromoteTo (U 'Queen 'Rook 'Bishop 'Knight))
(define-struct PromoMove
  ([src : Loc]
   [dst : Loc]
   [moved : Piece]
   [captured : (Option Piece)]
   [promote-to : PromoteTo]))
(provide PromoteTo (struct-out PromoMove))

(define-type Move (U StdMove CastleMove PromoMove))
(provide Move)

(define-struct Castles
  ([black-toward-0-0 : Boolean]
   [black-toward-0-7 : Boolean]
   [white-toward-7-0 : Boolean]
   [white-toward-7-7 : Boolean]))

(define-struct ChessGame
  ([board : Board]
   [turn : Player]
   [history : (Listof Move)]
   [cas : Castles]))
(provide (struct-out ChessGame))

;; Shorthand for pieces
(define bpawn
  (Piece 'Pawn 'Black))
(define bking
  (Piece 'King 'Black))
(define bqueen
  (Piece 'Queen 'Black))
(define bbishop
  (Piece 'Bishop 'Black))
(define brook
  (Piece 'Rook 'Black))
(define bknight
  (Piece 'Knight 'Black))
(define wpawn
  (Piece 'Pawn 'White))
(define wking
  (Piece 'King 'White))
(define wqueen
  (Piece 'Queen 'White))
(define wrook
  (Piece 'Rook 'White))
(define wknight
  (Piece 'Knight 'White))
(define wbishop
  (Piece 'Bishop 'White))

(: opp (Player -> Player))
;; Flips the player
(define (opp p)
  (match p
    ['White 'Black]
    ['Black 'White]))

(: starting-board : Board)
;; Standard layout of chess board, black on top
(define starting-board
  (list
   (list (Some brook)
         (Some bknight)
         (Some bbishop)
         (Some bqueen)
         (Some bking)
         (Some bbishop)
         (Some bknight)
         (Some brook))
   (list (Some bpawn)
         (Some bpawn)
         (Some bpawn)
         (Some bpawn)
         (Some bpawn)
         (Some bpawn)
         (Some bpawn)
         (Some bpawn))
   (list 'None 'None 'None 'None 'None 'None 'None 'None)
   (list 'None 'None 'None 'None 'None 'None 'None 'None)
   (list 'None 'None 'None 'None 'None 'None 'None 'None)
   (list 'None 'None 'None 'None 'None 'None 'None 'None)
   (list (Some wpawn)
         (Some wpawn)
         (Some wpawn)
         (Some wpawn)
         (Some wpawn)
         (Some wpawn)
         (Some wpawn)
         (Some wpawn))
   (list (Some wrook)
         (Some wknight)
         (Some wbishop)
         (Some wqueen)
         (Some wking)
         (Some wbishop)
         (Some wknight)
         (Some wrook))))

(: strings->board : ((Listof String) -> Board))
;; Creates a board given a list of strings
(define (strings->board ss)
  (local
    {(: string->row : String -> (Listof Square))
     ;; Creates one row of a board using a string
     (define (string->row s)
       (if (string=? s "") '()
       (match (string-ref s 0)
         [#\- (cons 'None (string->row (substring s 1)))]
         [#\P (cons (Some bpawn) (string->row (substring s 1)))]
         [#\R (cons (Some brook) (string->row (substring s 1)))]
         [#\B (cons (Some bbishop) (string->row (substring s 1)))]
         [#\N (cons (Some bknight) (string->row (substring s 1)))]
         [#\Q (cons (Some bqueen) (string->row (substring s 1)))]
         [#\K (cons (Some bking) (string->row (substring s 1)))]
         [#\p (cons (Some wpawn) (string->row (substring s 1)))]
         [#\r (cons (Some wrook) (string->row (substring s 1)))]
         [#\b (cons (Some wbishop) (string->row (substring s 1)))]
         [#\n (cons (Some wknight) (string->row (substring s 1)))]
         [#\q (cons (Some wqueen) (string->row (substring s 1)))]
         [#\k (cons (Some wking) (string->row (substring s 1)))]
         [_ '()])))
     (: s->b : (Listof String) -> Board)
     ;; Does most of strings->board's work
     (define (s->b slist)
       (match slist
         ['() '()]
         [(cons hd tl)
          (cons (string->row hd) (s->b tl))]))
     }
    (if (not (or
              (= (length ss) 8)
              (= (string-length (first ss)) 8)))
        (error "Incorrect size")
        (s->b ss))))
(check-expect (strings->board
               (list
                "RNBQKBNR"
                "PPPPPPPP"
                "--------"
                "--------"
                "--------"
                "--------"
                "pppppppp"
                "rnbqkbnr")) starting-board)

(define testboard1
  (strings->board
               (list
                "-NB-KB-R"
                "RPP-PPP-"
                "P--Q-N-P"
                "---P----"
                "----p-q-"
                "bpn-----"
                "p-pp-ppp"
                "r---kbnr")))
 
(: new-game : ChessGame)
;; Starting chess game details
(define new-game
  (ChessGame starting-board 'White '()
             (Castles #t #t #t #t)))

(: board-ref : Board Loc -> Square)
;; Given a board + location, what's in the square?
(define (board-ref b l)
  (if (or (> (Loc-row l) 7) (> (Loc-col l) 7)) (error "out of bounds")
  (list-ref (list-ref b (Loc-row l)) (Loc-col l))))
(check-expect (board-ref starting-board (Loc 0 2)) (Some bbishop))
(check-expect (board-ref starting-board (Loc 3 4)) 'None)
(check-error (board-ref testboard1 (Loc 0 8)) "out of bounds")

(: update-list : (All (A) (Listof A) Integer A -> (Listof A)))
;; Helper function that updates list
(define (update-list sqs n s)
  (match sqs
    ['() '()]
    [(cons hd tl)
     (cond
       [(<= n 0) (cons s tl)]
       [else (cons hd
                   (update-list tl (sub1 n) s))])]))

(: board-update : Board Loc Square -> Board)
;; Updates given board at Loc with new Square
(define (board-update b l s)
  (update-list b
               (Loc-row l)
               (update-list
                (list-ref b (Loc-row l))
                (Loc-col l) s)))

(: find-king (Board Player -> Loc))
;; Finds the player's king on a board
(define (find-king b p)
  (local
    {(: king-member ((Listof Square)-> Integer))
     ;; Searches a list for the ref of king
     (define (king-member sqs)
       (match p
         ['White
          (match sqs
            ['() 0]
            [(cons hd tl)
             (match hd
               [(Some p)
                (if (equal? wking p)
                    0
                    (add1 (king-member tl)))]
               [_ (add1 (king-member tl))])])]
         ['Black
          (match sqs
            ['() 0]
            [(cons hd tl)
             (match hd
               [(Some p)
                (if (equal? bking p) 0
                    (add1 (king-member tl)))]
               [_ (add1 (king-member tl))])])]))
     (: king-row (Board -> Integer))
     ;; Finds the row with the player's king
     (define (king-row b)
       (match p
         ['White
          (match b
            ['() 0]
            [(cons hd tl)
             (if
              (equal?
               (member (Some wking) hd) (Some wking))
              0
              (add1 (king-row tl)))])]
         ['Black
          (match b
            ['() 0]
            [(cons hd tl)
             (if
              (equal?
               (member (Some bking) hd) (Some bking))
              0
              (add1 (king-row tl)))])]))}
    (Loc (king-row b)
         (king-member (list-ref b (king-row b))))))

(: bishop-range? (Loc Loc Board Player -> Boolean))
;; Checks if a location is within a bishop's range, l1 being bishop
(define (bishop-range? l1 l2 b p)
  (local
    {(: lower-left (Loc Loc Board -> Boolean))
     ;; Checks if a lower-left location is in range of another
     (define (lower-left loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (lower-left
                     (Loc (add1 (Loc-row loc1)) (sub1 (Loc-col loc1)))
                     loc2 board)]
             [_ #f])))
     (: lower-right (Loc Loc Board -> Boolean))
     ;; Checks if a lower-right location is in range of another
     (define (lower-right loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (lower-right
                     (Loc (add1 (Loc-row loc1)) (add1 (Loc-col loc1)))
                     loc2 board)]
             [_ #f])))
     (: upper-left (Loc Loc Board -> Boolean))
     ;; Checks if a upper-left location is in range of another
     (define (upper-left loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (upper-left
                     (Loc (sub1 (Loc-row loc1)) (sub1 (Loc-col loc1)))
                     loc2 board)]
             [_ #f])))
     (: upper-right (Loc Loc Board -> Boolean))
     ;; Checks if a upper-right location is in range of another
     (define (upper-right loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (upper-right
                     (Loc (sub1 (Loc-row loc1)) (add1 (Loc-col loc1)))
                     loc2 board)]
             [_ #f])))}
    (match* (l1 l2)
      [((Loc r1 c1) (Loc r2 c2))
       (cond
         [(match (board-ref b l2)
            ['None #f]
            [(Some piece)
             (symbol=? (Piece-color piece) p)]) #f]
         [(=
           (abs (- r1 r2))
           (abs (- c1 c2)))
          (cond
            [(and
              (> r1 r2)
              (> c1 c2)) (lower-right l1 l2 b)]
            [(and
              (> r1 r2)
              (< c1 c2)) (lower-left l1 l2 b)]
            [(and
              (< r1 r2)
              (> c1 c2)) (upper-right l1 l2 b)]
            [else (upper-left l1 l2 b)])]
         [else #f])])))

(: rook-range? (Loc Loc Board Player -> Boolean))
;; Checks if a location is within a rook's range
(define (rook-range? l1 l2 b p)
  (local
    {(: left? (Loc Loc Board -> Boolean))
     ;; Is a leftward location in range of another?
     (define (left? loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (left?
                     (Loc (Loc-row loc1) (sub1 (Loc-col loc1)))
                     loc2 board)]
             [_ #f])))
     (: right? (Loc Loc Board -> Boolean))
     ;; Is a rightward location in range of another?
     (define (right? loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (right?
                     (Loc (Loc-row loc1) (add1 (Loc-col loc1)))
                     loc2 board)]
             [_ #f])))
     (: up? (Loc Loc Board -> Boolean))
     ;; Is a upward location in range of another?
     (define (up? loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (up?
                     (Loc (add1 (Loc-row loc1)) (Loc-col loc1))
                     loc2 board)]
             [_ #f])))
     (: down? (Loc Loc Board -> Boolean))
     ;; Is a downward location in range of another?
     (define (down? loc1 loc2 board)
       (if (equal? loc1 loc2) #t
           (match (board-ref board loc1)
             ['None (down?
                     (Loc (sub1 (Loc-row loc1)) (Loc-col loc1))
                     loc2 board)]
             [_ #f])))}
    (match* (l1 l2)
      [((Loc r1 c1) (Loc r2 c2))
       (cond
         [(match (board-ref b l2)
            ['None #f]
            [(Some piece)
             (symbol=? (Piece-color piece) p)]) #f]
         [(= r1 r2)
          (if (> c1 c2)
              (left? l1 l2 b)
              (right? l1 l2 b))]
         [(= c1 c2)
          (if (> r1 r2)
              (up? l1 l2 b)
              (down? l1 l2 b))]
         [else #f])])))

(: knight-range? (Loc Loc Board Player -> Boolean))
;; Checks if a location is within another's knight range, player is whose knight
(define (knight-range? l1 l2 b p)
  (match* (l1 l2)
    [((Loc r1 c1) (Loc r2 c2))
     (cond
       [(or
         (and
          (= (abs (- r1 r2)) 1)
          (= (abs (- c1 c2)) 2))
         (and
          (= (abs (- r1 r2)) 2)
          (= (abs (- c1 c2)) 1)))
        (match (board-ref b l2)
          ['None #t]
          [(Some piece)
           (not (symbol=? (Piece-color piece) p))])]
       [else #f])]))

(: pawn-attack-range? (Loc Player Loc Board -> Boolean))
;; Checks if a location is within another's pawn attack range
;; given whose pawn it is
;; l1 is location of the pawn
(define (pawn-attack-range? l1 p l2 b)
  (match (board-ref b l2)
    ['None #f]
    [(Some piece)
     (if (symbol=? (Piece-color piece) p) #f
         (match* (l1 l2)
           [((Loc r1 c1) (Loc r2 c2))
            (cond
              [(and
                (= (abs (- c1 c2)) 1)
                (= (- r1 r2) 1)
                (symbol=? 'White p)) #t]
              [(and
                (= (abs (- c1 c2)) 1)
                (= (- r1 r2) -1)
                (symbol=? 'Black p)) #t]
              [else #f])]))]))

(: pawn-move-range? (Loc Player Loc Board -> Boolean))
;; Checks if a location is within another's pawn move range
;; l1 is location of the pawn
(define (pawn-move-range? l1 p l2 b)
  (if (symbol=? 'White p)
  (cond
    [(and
      (= (Loc-row l1) (+ 2 (Loc-row l2)))
      (equal? (board-ref b l2) 'None)
      (equal? (board-ref b
                         (Loc
                          (add1 (Loc-row l2))
                          (Loc-col l2))) 'None)) #t]
    [(and
      (= (Loc-row l1) (add1 (Loc-row l2)))
      (equal? (board-ref b l2) 'None)) #t]
    [else #f])
  (cond
    [(and
      (= (Loc-row l1) (- 2 (Loc-row l2)))
      (equal? (board-ref b l2) 'None)
      (equal? (board-ref b
                         (Loc
                          (sub1 (Loc-row l2))
                          (Loc-col l2))) 'None)) #t]
    [(and
      (= (Loc-row l1) (sub1 (Loc-row l2)))
      (equal? (board-ref b l2) 'None)) #t]
    [else #f])))

(: run-through (Loc Board Player -> Boolean))
;; Runs through the whole board, checking if in check
(define (run-through l b p)
  (local
    {(: king : Loc)
     ;; Location of the king
     (define king
       (find-king b p))}
    (cond
      [(> (Loc-row l) 7) #f]
      [(> (Loc-col l) 7) (run-through
                          (Loc (add1 (Loc-row l)) 0) b p)]
      [else
       (match (board-ref b l)
         ['None (run-through
                 (Loc (Loc-row l) (add1 (Loc-col l))) b p)]
         [(Some piece)
          (if (symbol=? (Piece-color piece) p)
              (run-through
               (Loc (Loc-row l) (add1 (Loc-col l))) b p)
              (match (Piece-type piece)
                ['Queen (or
                         (rook-range? king l b p)
                         (bishop-range? king l b p))]
                ['Bishop (bishop-range? king l b p)]
                ['Knight (knight-range? king l b p)]
                ['Rook (rook-range? king l b p)]
                ['Pawn (pawn-attack-range? l (opp p) king b)]))])])))

(: in-check? : ChessGame -> Boolean)
;; Is the player whose turn it is in check?
(define (in-check? game)
  (run-through (Loc 0 0) (ChessGame-board game) (ChessGame-turn game)))

(: king-range? (Loc Loc Player Board -> Boolean))
;; Checks if a king at l1 of the player's can move to l2
(define (king-range? l1 l2 p b)
  (match* (l1 l2)
    [((Loc r1 c1) (Loc r2 c2))
     (cond
       [(or
         (= (abs (- r1 r2)) 1)
         (= (abs (- c1 c2)) 1))
        (match (board-ref b l2)
          ['None #t]
          [(Some piece)
           (not (symbol=? (Piece-color piece) p))])]
       [else #f])]))

(: legal-move? : ChessGame Move -> Boolean)
;; Is the proposed move legal?
(define (legal-move? game m)
  (local
    {(: player : Player)
     ;; Whoever's turn
     (define player (ChessGame-turn game))
     (: board : Board)
     ;; The board
     (define board (ChessGame-board game))}
    (match m
      [(CastleMove _ _ _ _ _) (error "not allowed")]
      [(PromoMove _ _ _ _ _) (error "not allowed")]
      [(StdMove src dest piece _)
       (if (and
            (not (symbol=? (Piece-type piece) 'King))
            (in-check? game))
           #f
           (and
            (match (Piece-type piece)
              ['King (king-range? src dest player board)]
              ['Queen (or
                       (bishop-range? src dest board player)
                       (rook-range? src dest board player))]
              ['Knight (knight-range? src dest board player)]
              ['Bishop (bishop-range? src dest board player)]
              ['Rook (rook-range? src dest board player)]
              ['Pawn (or
                      (pawn-attack-range? src player dest board)
                      (pawn-move-range? src player dest board))])
            (not (in-check?
                  (ChessGame
                   (board-update (ChessGame-board game) src 'None)
                   (ChessGame-turn game)
                   (ChessGame-history game)
                   (ChessGame-cas game))))))])))

(: list-moves : Piece Loc Loc ChessGame -> (Listof Move))
;; Compiles a list of moves given a piece, all legal
(define (list-moves p ploc dest game)
  (cond
    [(> (Loc-row dest) 7) '()]
    [(> (Loc-col dest) 7) (list-moves p ploc (Loc
                                      (add1 (Loc-row dest))
                                      (Loc-col dest)) game)]
    [(legal-move?
      game
      (StdMove ploc
               dest
               p
               (board-ref (ChessGame-board game) dest)))
     (cons
      (StdMove ploc
               dest
               p
               (board-ref (ChessGame-board game) dest))
      (list-moves p ploc
                  (Loc
                   (Loc-row dest)
                   (add1 (Loc-col dest)))
                  game))]
    [else (list-moves p ploc
                      (Loc
                       (Loc-row dest)
                       (add1 (Loc-col dest)))
                      game)]))

(: available-moves-piece : ChessGame Loc -> (Listof Move))
;; Given a game and piece (by loc), prints list of legal moves
(define (available-moves-piece game l)
  (match (board-ref (ChessGame-board game) l)
    ['None (error "nothing in square")]
    [(Some piece) 
     (list-moves piece l (Loc 0 0) game)]))

(: current-pieces : Board Player Loc -> (Listof Loc))
;; Gives a list of locations of pieces the current player has
(define (current-pieces b p l)
  (cond
    [(> (Loc-row l) 7) '()]
    [(> (Loc-col l) 7) (current-pieces b p (Loc (add1 (Loc-row l)) 0))]
    [else
     (match (board-ref b l)
       ['None (current-pieces b p (Loc (Loc-row l) (add1 (Loc-col l))))]
       [(Some piece)
        (cond
          [(symbol=? (Piece-color piece) p) (cons
                                             l
                                             (current-pieces
                                              b
                                              p
                                              (Loc
                                               (Loc-row l)
                                               (add1 (Loc-col l)))))]
          [else (current-pieces b p (Loc
                                     (Loc-row l)
                                     (add1 (Loc-col l))))])])]))

(: available-moves-player : ChessGame -> (Listof Move))
;; List all legal moves for the current player
(define (available-moves-player game)
  (local
    {(: append-moves : (Listof (Listof Move))-> (Listof Move))
     ;; Turns a list of move lists into a single list
     (define (append-moves listms)
       (match listms
         ['() '()]
         [(cons hd tl)
          (append hd (append-moves tl))]))}
    (append-moves
     (map
      (lambda ([x : Loc])
        (available-moves-piece game x))
      (current-pieces
       (ChessGame-board game)
       (ChessGame-turn game)
       (Loc 0 0))))))

(: checkmate? : ChessGame -> Boolean)
;; Is the player in checkmate?
(define (checkmate? game)
  (if (and
       (in-check? game)
       (equal? (available-moves-player game) '()))
      #t
      #f))

(: stalemate? : ChessGame -> Boolean)
;; Is the game a stalemate?
(define (stalemate? game)
  (if (and
       (not (in-check? game))
       (equal? (available-moves-player game) '()))
      #t
      #f))

(: apply-move : ChessGame Move -> ChessGame)
;; Make the given move, update the board, history, castles, and player turn
;; Assuming for now that move = StdMove
(define (apply-move game m)
  (local
    {(: black-0-0? : Boolean)
     ;; Is the upper left corner able to castle?
     (define black-0-0?
       (cond
         [(not (Castles-black-toward-0-0
                (ChessGame-cas game))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 0 0))
                (Some brook))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 0 4))
                (Some bking))) #f]
         [else #t]))
     (: black-0-7? : Boolean)
     ;; Is the upper right corner able to castle?
     (define black-0-7?
       (cond
         [(not (Castles-black-toward-0-7
                (ChessGame-cas game))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 0 7))
                (Some brook))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 0 4))
                (Some bking))) #f]
         [else #t]))
     (: white-7-0? : Boolean)
     ;; Is the lower left corner able to castle?
     (define white-7-0?
       (cond
         [(not (Castles-white-toward-7-0
                (ChessGame-cas game))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 7 0))
                (Some wrook))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 7 4))
                (Some wking))) #f]
         [else #t]))
     (: white-7-7? : Boolean)
     ;; Is the lower right corner able to castle?
     (define white-7-7?
       (cond
         [(not (Castles-white-toward-7-7
                (ChessGame-cas game))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 7 7))
                (Some wrook))) #f]
         [(not (equal?
                (board-ref (ChessGame-board game) (Loc 7 4))
                (Some wking))) #f]
         [else #t]))}
    (if (not (legal-move? game m)) (error "illegal move")
        (match m
          [(StdMove src dest piece cap)
           (ChessGame
            (board-update
             (board-update
              (ChessGame-board game) src 'None)
             dest (Some piece))
            (opp (ChessGame-turn game))
            (cons m (ChessGame-history game))
            (Castles
             black-0-0?
             black-0-7?
             white-7-0?
             white-7-7?))]))))

(: p-img : Square -> String)
;; Applies the various unicode text to a piece
(define (p-img s)
  (match s
    ['None ""]
    [(Some bpawn) "♟"]
    [(Some brook) "♜"]
    [(Some bbishop) "♝"]
    [(Some bknight) "♞"]
    [(Some bqueen) "♛"]
    [(Some bking) "♚"]
    [(Some wpawn) "♙"]
    [(Some wrook) "♖"]
    [(Some wbishop) "♗"]
    [(Some wknight) "♘"]
    [(Some wqueen) "♕"]
    [_ "♔"]))

(: squares->row : (Listof Square) Image-Color -> Image)
;; Turns a list of squares into an image of the row given the color
;; of the first square
(define (squares->row sqs col)
  (match sqs
    ['() empty-image]
    [(cons hd tl)
     (beside
      (overlay
       (square 30 "outline" "black")
       (text (p-img hd) 20 "black")
       (square 30 "solid" col))
      (squares->row tl (if (equal? col "beige") "brown" "beige")))]))

(: board->image : Board -> Image)
;; Draws a chess board
(define (board->image b)
  (match b
    ['() empty-image]
    [(cons hd tl)
     (match tl
       ['() empty-image]
       [(cons head tail)
  (above
   (squares->row hd "beige")
   (squares->row head "brown")
   (board->image tail))])]))

(test)